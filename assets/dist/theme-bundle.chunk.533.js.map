{"version":3,"file":"theme-bundle.chunk.533.js","mappings":"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","sources":["webpack://Halo/./assets/js/theme/common/form-validation.js","webpack://Halo/./assets/js/theme/auth.js"],"sourcesContent":["import { createTranslationDictionary } from './utils/translations-utils';\n\n/**\n * Validate that the given date for the day/month/year select inputs is within potential range\n * @param $formField\n * @param validation\n * @returns {{selector: string, triggeredBy: string, validate: Function, errorMessage: string}}\n */\nfunction buildDateValidation($formField, validation, requiredMessage) {\n    // No date range restriction, skip\n    if (validation.min_date && validation.max_date) {\n        const invalidMessage = `Your chosen date must fall between ${validation.min_date} and ${validation.max_date}.`;\n        const formElementId = $formField.attr('id');\n        const minSplit = validation.min_date.split('-');\n        const maxSplit = validation.max_date.split('-');\n        const minDate = new Date(minSplit[0], minSplit[1] - 1, minSplit[2]);\n        const maxDate = new Date(maxSplit[0], maxSplit[1] - 1, maxSplit[2]);\n\n        return {\n            selector: `#${formElementId} select[data-label=\"year\"]`,\n            triggeredBy: `#${formElementId} select:not([data-label=\"year\"])`,\n            validate: (cb, val) => {\n                const day = Number($formField.find('select[data-label=\"day\"]').val());\n                const month = Number($formField.find('select[data-label=\"month\"]').val()) - 1;\n                const year = Number(val);\n                const chosenDate = new Date(year, month, day);\n\n                cb(chosenDate >= minDate && chosenDate <= maxDate);\n            },\n            errorMessage: invalidMessage,\n        };\n    }\n    // Required Empty Date field\n    if (validation.required && (!validation.min_date || !validation.max_date)) {\n        const formElementId = $formField.attr('id');\n\n        return {\n            selector: `#${formElementId} select[data-label=\"year\"]`,\n            triggeredBy: `#${formElementId} select:not([data-label=\"year\"])`,\n            validate: (cb, val) => {\n                const day = $formField.find('select[data-label=\"day\"]').val();\n                const month = $formField.find('select[data-label=\"month\"]').val();\n                const year = val;\n\n                cb(day && month && year);\n            },\n            errorMessage: requiredMessage,\n        };\n    }\n}\n\n/**\n * We validate checkboxes separately from single input fields, as they must have at least one checked option\n * from many different inputs\n * @param $formField\n * @param validation\n * @param errorText provides error validation message\n */\nfunction buildRequiredCheckboxValidation(validation, $formField, errorText) {\n    const formFieldId = $formField.attr('id');\n    const primarySelector = `#${formFieldId} input:first-of-type`;\n    const secondarySelector = `#${formFieldId} input`;\n\n    return {\n        selector: primarySelector,\n        triggeredBy: secondarySelector,\n        validate: (cb) => {\n            let result = false;\n\n            $(secondarySelector).each((index, checkbox) => {\n                if (checkbox.checked) {\n                    result = true;\n\n                    return false;\n                }\n            });\n\n            cb(result);\n        },\n        errorMessage: errorText,\n    };\n}\n\nfunction buildRequiredValidation(validation, selector, errorText) {\n    return {\n        selector,\n        validate(cb, val) {\n            cb(val.length > 0);\n        },\n        errorMessage: errorText,\n    };\n}\n\nfunction buildNumberRangeValidation(validation, formFieldSelector) {\n    const invalidMessage = `The value for ${validation.label} must be between ${validation.min} and ${validation.max}.`;\n    const min = Number(validation.min);\n    const max = Number(validation.max);\n\n    return {\n        selector: `${formFieldSelector} input[name=\"${validation.name}\"]`,\n        validate: (cb, val) => {\n            const numberVal = Number(val);\n\n            cb(numberVal >= min && numberVal <= max);\n        },\n        errorMessage: invalidMessage,\n    };\n}\n\n\nfunction buildValidation($validateableElement, errorMessage) {\n    const validation = $validateableElement.data('validation');\n    const fieldValidations = [];\n    const formFieldSelector = `#${$validateableElement.attr('id')}`;\n\n    if (validation.type === 'datechooser') {\n        const dateValidation = buildDateValidation($validateableElement, validation, errorMessage);\n\n        if (dateValidation) {\n            fieldValidations.push(dateValidation);\n        }\n    } else if (validation.required && (validation.type === 'checkboxselect' || validation.type === 'radioselect')) {\n        fieldValidations.push(buildRequiredCheckboxValidation(validation, $validateableElement, errorMessage));\n    } else {\n        $validateableElement.find('input, select, textarea').each((index, element) => {\n            const $inputElement = $(element);\n            const tagName = $inputElement.get(0).tagName;\n            const inputName = $inputElement.attr('name');\n            const elementSelector = `${formFieldSelector} ${tagName}[name=\"${inputName}\"]`;\n\n            if (validation.type === 'numberonly') {\n                fieldValidations.push(buildNumberRangeValidation(validation, formFieldSelector));\n            }\n            if (validation.required) {\n                fieldValidations.push(buildRequiredValidation(validation, elementSelector, errorMessage));\n            }\n        });\n    }\n\n    return fieldValidations;\n}\n\n/**\n * Builds the validation model for dynamic forms\n * @param $form\n * @param context provides access for error messages on required fields validation\n * @returns {Array}\n */\nexport default function ($form, context) {\n    let validationsToPerform = [];\n    const { field_not_blank: requiredFieldValidationText } = createTranslationDictionary(context);\n\n    $form.find('[data-validation]').each((index, input) => {\n        const getLabel = $el => $el.first().data('validation').label;\n        const requiredValidationMessage = getLabel($(input)) + requiredFieldValidationText;\n\n        validationsToPerform = validationsToPerform.concat(buildValidation($(input), requiredValidationMessage));\n    });\n\n    return validationsToPerform;\n}\n","import PageManager from './page-manager';\nimport stateCountry from './common/state-country';\nimport nod from './common/nod';\nimport validation from './common/form-validation';\nimport forms from './common/models/forms';\nimport {\n    classifyForm,\n    Validators,\n    createPasswordValidationErrorTextObject,\n    announceInputErrorMessage,\n} from './common/utils/form-utils';\nimport { createTranslationDictionary } from './common/utils/translations-utils';\n\nexport default class Auth extends PageManager {\n    constructor(context) {\n        super(context);\n        this.validationDictionary = createTranslationDictionary(context);\n        this.formCreateSelector = 'form[data-create-account-form]';\n        this.recaptcha = $('.g-recaptcha iframe[src]');\n    }\n\n    registerLoginValidation($loginForm) {\n        const loginModel = forms;\n\n        this.loginValidator = nod({\n            submit: '.login-form input[type=\"submit\"]',\n            tap: announceInputErrorMessage,\n        });\n\n        this.loginValidator.add([\n            {\n                selector: '.login-form input[name=\"login_email\"]',\n                validate: (cb, val) => {\n                    const result = loginModel.email(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.useValidEmail,\n            },\n            {\n                selector: '.login-form input[name=\"login_pass\"]',\n                validate: (cb, val) => {\n                    const result = loginModel.password(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.enterPass,\n            },\n        ]);\n\n        $loginForm.on('submit', event => {\n            this.loginValidator.performCheck();\n\n            if (this.loginValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    registerForgotPasswordValidation($forgotPasswordForm) {\n        this.forgotPasswordValidator = nod({\n            submit: '.forgot-password-form input[type=\"submit\"]',\n            tap: announceInputErrorMessage,\n        });\n\n        this.forgotPasswordValidator.add([\n            {\n                selector: '.forgot-password-form input[name=\"email\"]',\n                validate: (cb, val) => {\n                    const result = forms.email(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.useValidEmail,\n            },\n        ]);\n\n        $forgotPasswordForm.on('submit', event => {\n            this.forgotPasswordValidator.performCheck();\n\n            if (this.forgotPasswordValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    registerNewPasswordValidation() {\n        const { password: enterPassword, password_match: matchPassword } = this.validationDictionary;\n        const newPasswordForm = '.new-password-form';\n        const newPasswordValidator = nod({\n            submit: $(`${newPasswordForm} input[type=\"submit\"]`),\n            tap: announceInputErrorMessage,\n        });\n        const passwordSelector = $(`${newPasswordForm} input[name=\"password\"]`);\n        const password2Selector = $(`${newPasswordForm} input[name=\"password_confirm\"]`);\n        const errorTextMessages = createPasswordValidationErrorTextObject(enterPassword, enterPassword, matchPassword, this.passwordRequirements.error);\n        Validators.setPasswordValidation(\n            newPasswordValidator,\n            passwordSelector,\n            password2Selector,\n            this.passwordRequirements,\n            errorTextMessages,\n        );\n    }\n\n    registerCreateAccountValidator($createAccountForm) {\n        const validationModel = validation($createAccountForm, this.context);\n        const createAccountValidator = nod({\n            submit: `${this.formCreateSelector} input[type='submit']`,\n            delay: 900,\n        });\n        const $stateElement = $('[data-field-type=\"State\"]');\n        const emailSelector = `${this.formCreateSelector} [data-field-type='EmailAddress']`;\n        const $emailElement = $(emailSelector);\n        const passwordSelector = `${this.formCreateSelector} [data-field-type='Password']`;\n        const $passwordElement = $(passwordSelector);\n        const password2Selector = `${this.formCreateSelector} [data-field-type='ConfirmPassword']`;\n        const $password2Element = $(password2Selector);\n\n        createAccountValidator.add(validationModel);\n\n        if ($stateElement) {\n            let $last;\n\n            // Requests the states for a country with AJAX\n            stateCountry($stateElement, this.context, (err, field) => {\n                if (err) {\n                    throw new Error(err);\n                }\n\n                const $field = $(field);\n\n                if (createAccountValidator.getStatus($stateElement) !== 'undefined') {\n                    createAccountValidator.remove($stateElement);\n                }\n\n                if ($last) {\n                    createAccountValidator.remove($last);\n                }\n\n                if ($field.is('select')) {\n                    $last = field;\n                    Validators.setStateCountryValidation(createAccountValidator, field, this.validationDictionary.field_not_blank);\n                } else {\n                    Validators.cleanUpStateValidation(field);\n                }\n            });\n        }\n\n        if ($emailElement) {\n            createAccountValidator.remove(emailSelector);\n            Validators.setEmailValidation(createAccountValidator, emailSelector, this.validationDictionary.valid_email);\n        }\n\n        if ($passwordElement && $password2Element) {\n            const { password: enterPassword, password_match: matchPassword } = this.validationDictionary;\n\n            createAccountValidator.remove(passwordSelector);\n            createAccountValidator.remove(password2Selector);\n            Validators.setPasswordValidation(\n                createAccountValidator,\n                passwordSelector,\n                password2Selector,\n                this.passwordRequirements,\n                createPasswordValidationErrorTextObject(enterPassword, enterPassword, matchPassword, this.passwordRequirements.error),\n            );\n        }\n\n        $createAccountForm.on('submit', (event) => {\n            this.submitAction(event, createAccountValidator);\n        });\n    }\n\n    submitAction(event, validator) {\n        validator.performCheck();\n\n        if (validator.areAll('valid')) {\n            return;\n        }\n        event.preventDefault();\n        setTimeout(() => {\n            const earliestError = $('span.form-inlineMessage:first').prev('input');\n            earliestError.focus();\n        }, 900);\n    }\n\n    /**\n     * Request is made in this function to the remote endpoint and pulls back the states for country.\n     */\n    onReady() {\n        if (!this.recaptcha.attr('title')) {\n            this.recaptcha.attr('title', this.context.recaptchaTitle);\n        }\n\n        const $createAccountForm = classifyForm(this.formCreateSelector);\n        const $loginForm = classifyForm('.login-form');\n        const $forgotPasswordForm = classifyForm('.forgot-password-form');\n        const $newPasswordForm = classifyForm('.new-password-form'); // reset password\n\n        // Injected via auth.html\n        this.passwordRequirements = this.context.passwordRequirements;\n\n        if ($loginForm.length) {\n            this.registerLoginValidation($loginForm);\n        }\n\n        if ($newPasswordForm.length) {\n            this.registerNewPasswordValidation();\n        }\n\n        if ($forgotPasswordForm.length) {\n            this.registerForgotPasswordValidation($forgotPasswordForm);\n        }\n\n        if ($createAccountForm.length) {\n            this.registerCreateAccountValidator($createAccountForm);\n        }\n    }\n}\n"],"names":["$form","context","validationsToPerform","requiredFieldValidationText","createTranslationDictionary","field_not_blank","find","each","index","input","requiredValidationMessage","$","first","data","label","concat","$validateableElement","errorMessage","errorText","formFieldId","secondarySelector","validation","fieldValidations","formFieldSelector","attr","type","dateValidation","$formField","requiredMessage","min_date","max_date","invalidMessage","formElementId","minSplit","split","maxSplit","minDate","Date","maxDate","selector","triggeredBy","validate","cb","val","day","Number","month","year","chosenDate","required","buildDateValidation","push","element","$inputElement","tagName","get","inputName","elementSelector","min","max","name","numberVal","buildNumberRangeValidation","length","buildRequiredValidation","result","checkbox","checked","buildValidation","Auth","_PageManager","_this","call","validationDictionary","formCreateSelector","recaptcha","_proto","prototype","registerLoginValidation","$loginForm","_this2","loginModel","forms","this","loginValidator","nod","submit","tap","announceInputErrorMessage","add","email","useValidEmail","password","enterPass","on","event","performCheck","areAll","preventDefault","registerForgotPasswordValidation","$forgotPasswordForm","_this3","forgotPasswordValidator","registerNewPasswordValidation","_this$validationDicti","enterPassword","matchPassword","password_match","newPasswordForm","newPasswordValidator","passwordSelector","password2Selector","errorTextMessages","createPasswordValidationErrorTextObject","passwordRequirements","error","Validators","setPasswordValidation","registerCreateAccountValidator","$createAccountForm","$last","_this4","validationModel","createAccountValidator","delay","$stateElement","emailSelector","$emailElement","$passwordElement","$password2Element","stateCountry","err","field","Error","$field","getStatus","remove","is","setStateCountryValidation","cleanUpStateValidation","setEmailValidation","valid_email","_this$validationDicti2","submitAction","validator","setTimeout","prev","focus","onReady","recaptchaTitle","classifyForm","$newPasswordForm","PageManager"],"sourceRoot":""}